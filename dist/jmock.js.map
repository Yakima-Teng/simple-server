{"version":3,"file":"jmock.js","sources":["../src/utils/index.ts","../src/modules/random/basic.ts","../src/modules/random/index.ts","../src/main.ts"],"sourcesContent":["export const isDefined = (val: any): boolean => {\n  return typeof val !== 'undefined'\n}\n","import { isDefined } from '../../utils'\n\n/**\n * randomly return true or false\n * @param {number} [probability] the probability to return true, must be a value between 0 and 1 (including 0 and 1)\n *\n * @example\n * ```javascript\n * Mock.Random.boolean(0.9) // true\n * ```\n */\nconst bool = (probability?: number): boolean => {\n  if (!isDefined(probability)) {\n    return Math.random() > 0.5\n  }\n\n  return Math.random() > (1 - probability)\n}\n\n/**\n * randomly return an integer\n * @param {number} [min]\n * @param {number} [max]\n */\nconst int = (min?: number, max?: number): number => {\n  min = isDefined(min) ? parseInt('' + min, 10) : -9007199254740992 // -2^53\n  max = isDefined(max) ? parseInt('' + max, 10) : 9007199254740992 // 2^53\n  return  Math.round(Math.random() * (max - min)) + min\n}\n\n/**\n * randomly return a natural number (0, and positive integer)\n * @param {number} [min]\n * @param {number} [max]\n *\n * @example\n * ```javascript\n * Mock.Random.natural(10, 20) // 10\n * ```\n */\nconst natural = (min?: number, max?: number): number => {\n  min = isDefined(min) ? parseInt('' + min, 10) : 0\n  return int(min, max)\n}\n\n/**\n * randomly return a character\n * @param {string} clue 'lower', 'upper', 'number', 'symbol', 'alpha', or other given string\n */\nconst char = (clue?: string): string => {\n  const lower = 'abcdefghijklmnopqrstuvwxyz'\n  const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const number = '0123456789'\n  const symbol = '!@#$%^&*()[]-+`~;\\'\\\\\":,./<>?|}{'\n  const alpha = lower + upper\n\n  const together = [alpha, number, symbol].join('')\n  const pools = { lower, upper, number, symbol, alpha }\n\n  const pool = !isDefined(clue) ? together : (pools[clue.toLowerCase()] || clue)\n  return pool.charAt(natural(0, pool.length - 1))\n}\n\n/**\n * randomly return a float number\n * @param min\n * @param max\n * @param minDecimalLength\n * @param maxDecimalLength\n */\nconst float = (min?: number, max?: number, minDecimalLength?: number, maxDecimalLength?: number): number => {\n  minDecimalLength = isDefined(minDecimalLength) ? minDecimalLength : 0\n  maxDecimalLength = isDefined(maxDecimalLength) ? maxDecimalLength : 17\n\n  // ensure length of decimal part is between [0, 17]\n  minDecimalLength = Math.max(Math.min(minDecimalLength, 17), 0)\n  maxDecimalLength = Math.max(Math.min(maxDecimalLength, 17), 0)\n  const decimalLength = natural(minDecimalLength, maxDecimalLength)\n\n  let returnNum = int(min, max) + '.'\n\n  for (let i = 0; i < decimalLength; i++) {\n    // the last dicimal number should not be zero, for it will be ignore by JS engine\n    returnNum += (i < decimalLength - 1) ? char('number') : char('123456789')\n  }\n\n  return parseFloat(returnNum)\n}\n\n/**\n * randomly return a string\n *\n * - Mock.Random.str(pool, min, max)\n * - Mock.Random.str(pool, length)\n * - Mock.Random.str(min, max), equals to Mock.Random.str(undefined, min, max)\n * - Mock.Random.str(pool), equals to Mock.Random.str(pool, 3, 7)\n * - Mock.Random.str(length), equals to Mock.Random.str(undefined, length)\n * - Mock.Random.str(), equals to Mock.Random.str(3, 7)\n *\n * @param {string | number} [pool] given string, or length of string\n * @param {number} [min] length of string, or minimum length of string\n * @param {number} [max] maximum length of string\n *\n * @example\n * ```javascript\n * Mock.Random.str('abc', 1, 3) // 'bc', 'a', 'abc', 'aca'\n *\n * Mock.Random.str('abd', 1) // 'a', 'b', 'd'\n *\n * Mock.Random.str(1, 4) // 'abcd', '4d', '@!A4'\n *\n * Mock.Random.str(1) // 'a', '$', '4'\n *\n * Mock.Random.str('d') // would always be 'd', not a random result actually ^_^\n *\n * Mock.Random.str() // would randomly return a strong of length between 3 and 7, e.g., 'abc78', '78#', '1@3wrAS'\n * ```\n */\nconst str = (pool?: string | number, min?: number, max?: number): string => {\n  let len\n  if (isDefined(max)) {\n    len = natural(min, max)\n  } else if (isDefined(min)) {\n    if (typeof pool === 'string') {\n      // (pool, length) return specific length of string from given pool\n      len = min\n    } else if (typeof pool === 'number') {\n      // (min, max) return random number (between min and max) of string\n      len = natural(pool, min)\n      pool = void 0\n    }\n  } else if (isDefined(pool)) {\n    if (typeof pool === 'number') {\n      // (length)\n      len = pool\n      pool = void 0\n    } else if (typeof pool === 'string') {\n      len = natural(3, 7)\n    }\n  } else {\n    len = natural(3, 7)\n  }\n  let text = ''\n  if (typeof pool === 'string') {\n    for (let i = 0; i < len; i++) {\n      text += char(pool)\n    }\n  }\n  return text\n}\n\n/**\n * return an array of integers\n *\n * Mock.Random.range() => Mock.Random.range(0, 0, 1) => []\n * Mock.Random.range(start) => Mock.Random.range(0, start, 1)\n * Mock.Random.range(start, stop) => Mock.Random.range(start, stop, 1)\n * Mock.Random.range(start, stop, step)\n * @param {number} [start] start integer, default is 0\n * @param {number} [stop] stop integer, itself is excluded from resulting array\n * @param {number} [step] step length, default is 1\n *\n * @example\n * ```javascript\n * Mock.Random.range() // []\n * Mock.Random.range(3) // [0, 1, 2, 3]\n * Mock.Random.range(2, 4) // [2, 3, 4]\n * Mock.Random.range(2, 8, 3) // [2, 5, 7]\n * Mock.Random.range(2, 7, 3) // [2, 5] (note that 7 is not included)\n * ```\n */\nconst range = (start?: number, stop?: number, step?: number) => {\n  if (!isDefined(start)) {\n    stop = 0\n    start = 0\n    step = 1\n  } else if (!isDefined(stop)) {\n    stop = start || 0\n    start = 0\n    step = 1\n  } else if (!isDefined(step)) {\n    step = 1\n  }\n  const len = Math.max(Math.ceil((stop - start) / step), 0)\n  let idx = 0\n  const arrRange = new Array(len)\n  while (idx < len) {\n    arrRange[idx++] = start\n    start += step\n  }\n  return range\n}\n\nexport default {\n  bool,\n  boolean: bool,\n  int,\n  integer: int,\n  natural,\n  char,\n  character: char,\n  float,\n  str,\n  string: str,\n  range,\n}\n","import Basic from './basic'\n\nexport default {\n  ...Basic\n}\n","import Random from './modules/random'\n\nexport class Mock {\n  static Random = Random\n}\n"],"names":[],"mappings":"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"}