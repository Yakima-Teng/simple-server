#!/usr/bin/env node

const path = require('path')
const exists = require('fs').existsSync
const inquirer = require('inquirer')
const logger = require('../lib/logger')
const home = require('user-home')
const checkVersion = require('../lib/check-version')
const download = require('download-git-repo')
const rm = require('rimraf').sync
const generate = require('../lib/generate')
const ora = require('ora')
const log = console.log

const name = 'jmock'
const localTemplatePath = path.join(home, `.${name}-template`)
const to = path.resolve(name)

if (exists(to)) {
    inquirer.prompt([
        {
            type: 'confirm',
            message: 'Target directory exists. Continue?',
            name: 'ok'
        }
    ]).then(answers => {
        answers.ok && run()
    }).catch(logger.fatal)
} else {
    run()
}

function run () {
    // 检查是否有本地模版
    if (exists(localTemplatePath)) {
        generate(name, localTemplatePath, to, err => {
            if (err) {
                logger.fatal(err)
            }
            log()
            logger.success('Generated "%s".', name)
        })
    } else {
        checkVersion(() => {
            const officialTemplate = 'Yakima-Teng/jmock'
            downloadAndGenerate(officialTemplate)
        })
    }
}

function downloadAndGenerate (template) {
    const spinner = ora('downloading jmock template')
    spinner.start()
    // 如果本地有缓存模版则清空之
    if (exists(localTemplatePath)) {
        rm(localTemplatePath)
    }
    download(template, localTemplatePath, { clone: false }, err => {
        spinner.stop()
        err && logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
        generate(name, localTemplatePath, to, err => {
            err && logger.fatal(err)
            log()
            logger.success('Generated "%s".', name)
        })
    })
}
